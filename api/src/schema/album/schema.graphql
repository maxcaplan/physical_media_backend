extend type Query {
  wishlist_album(id: Int!, options: QueryAlbumOptions): WishlistAlbum
  wishlist_albums(options: QueryAlbumOptions): [WishlistAlbum!]!
  owned_album(id: Int!, options: QueryAlbumOptions): OwnedAlbum
  owned_albums(options: QueryAlbumOptions): [OwnedAlbum!]!
}

input QueryAlbumOptions {
  with_artists: Boolean
  with_genres: Boolean
  with_producers: Boolean
  with_labels: Boolean
}

extend type Mutation {
  add_wishlist_album(
    input: AddWishlistAlbumInput!
  ): WishlistAlbum!

  update_wishlist_album(
    input: UpdateWishlistAlbumInput!
  ): WishlistAlbum

  delete_wishlist_album(id: Int!): WishlistAlbum

  add_owned_album(
    input: AddOwnedAlbumInput!
  ): OwnedAlbum!
  
  update_owned_album(
    input: UpdateOwnedAlbumInput!
  ): OwnedAlbum

  delete_owned_album(id: Int!): OwnedAlbum
}

input AddAlbumInput {
  name: String!
  description: String
  release_data: String
  artist_ids: [Int!]
  label_ids: [Int!]
  producer_ids: [Int!]
  genre_ids: [Int!]
  tracks: [AddTrackInput!]
  length: Int
}

input AddWishlistAlbumInput {
  album_input: AddAlbumInput!
  listings: [String!]
  ranking: Int
}

input AddOwnedAlbumInput {
  album_input: AddAlbumInput!
  condition: Condition
}

input UpdateAlbumInput {
  name: String
  description: String
  release_data: String
  artist_ids: [Int!]
  label_ids: [Int!]
  producer_ids: [Int!]
  genre_ids: [Int!]
  tracks: [UpdateTrackInput!]
  length: Int
}

input UpdateWishlistAlbumInput {
  id: Int!
  album_input: UpdateAlbumInput
  listings: [String!]
  ranking: Int
}

input UpdateOwnedAlbumInput {
  id: Int!
  album_input: UpdateAlbumInput
  condition: Condition
}

input AddTrackInput {
  name: String!
  length: Int
  side: Int
}

input UpdateTrackInput {
  name: String
  length: Int
  side: Int
}

type WishlistAlbum {
  id: Int!
  album: Album
  listings: [String!]
  ranking: Int
}

type OwnedAlbum {
  id: Int!
  album: Album
  condition: Condition
}

type Album {
  id: Int!
  name: String!
  description: String
  release_date: String
  artists: [Artist!]
  labels: [Label!]
  producers: [Producer!]
  genres: [Genre!]
  length: Int
  tracks: [Track!]
}

type Track {
  name: String!
  length: Int
  side: Int # Must be positive. Maps to alpha (0 = A)
}

enum Condition {
  P
  G
  VG
  VGP
  NM
  M
}
