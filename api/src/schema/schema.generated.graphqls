input AddAlbumInput {
  artist_ids: [Int!]
  description: String
  genre_ids: [Int!]
  label_ids: [Int!]
  length: Int
  name: String!
  producer_ids: [Int!]
  release_data: String
  tracks: [AddTrackInput!]
}

input AddArtistInput {
  description: String
  name: String!
  origin: String
}

input AddGenreInput {
  name: String!
}

input AddLabelInput {
  name: String!
}

input AddOwnedAlbumInput {
  album_input: AddAlbumInput!
  condition: Condition
}

input AddProducerInput {
  name: String!
}

input AddTrackInput {
  length: Int
  name: String!
  side: Int
}

input AddWishlistAlbumInput {
  album_input: AddAlbumInput!
  listings: [String!]
  ranking: Int
}

type Album {
  artists: [Artist!]
  description: String
  genres: [Genre!]
  id: Int!
  labels: [Label!]
  length: Int
  name: String!
  producers: [Producer!]
  release_date: String
  tracks: [Track!]
}

type Artist {
  albums: [Album!]
  description: String
  id: Int!
  name: String!
  origin: String
}

enum Condition {
  G
  M
  NM
  P
  VG
  VGP
}

type Genre {
  albums: [Album!]
  id: Int!
  name: String!
}

type Label {
  albums: [Album!]
  id: Int!
  name: String!
}

type Mutation {
  add_artist(input: AddArtistInput!): Artist!
  add_genre(input: AddGenreInput!): Genre!
  add_label(input: AddLabelInput!): Label!
  add_owned_album(input: AddOwnedAlbumInput!): OwnedAlbum!
  add_producer(input: AddProducerInput!): Producer!
  add_wishlist_album(input: AddWishlistAlbumInput!): WishlistAlbum!
  delete_artist(id: Int!): Artist
  delete_genre(id: Int!): Genre
  delete_label(id: Int!): Label
  delete_owned_album(id: Int!): OwnedAlbum
  delete_producer(id: Int!): Producer
  delete_wishlist_album(id: Int!): WishlistAlbum
  update_artist(input: UpdateArtistInput!): Artist
  update_genre(input: UpdateGenreInput!): Genre
  update_label(input: UpdateLabelInput!): Label
  update_owned_album(input: UpdateOwnedAlbumInput!): OwnedAlbum
  update_producer(input: UpdateProducerInput!): Producer
  update_wishlist_album(input: UpdateWishlistAlbumInput!): WishlistAlbum
}

type OwnedAlbum {
  album: Album
  condition: Condition
  id: Int!
}

type Producer {
  albums: [Album!]
  id: Int!
  name: String!
}

type Query {
  artist(id: Int!, options: QueryArtistOptions): Artist
  artists(with_albums: Boolean): [Artist!]!
  genre(id: Int!, options: QueryGenreOptions): Genre
  genres(options: QueryGenreOptions): [Genre!]!
  label(id: Int!, options: QueryLabelOptions): Label
  labels(options: QueryLabelOptions): [Label!]!
  owned_album(id: Int!, options: QueryAlbumOptions): OwnedAlbum
  owned_albums(options: QueryAlbumOptions): [OwnedAlbum!]!
  producer(id: Int!, options: QueryProducerOptions): Producer
  producers(options: QueryProducerOptions): [Producer!]!
  wishlist_album(id: Int!, options: QueryAlbumOptions): WishlistAlbum
  wishlist_albums(options: QueryAlbumOptions): [WishlistAlbum!]!
}

input QueryAlbumOptions {
  with_artists: Boolean
  with_genres: Boolean
  with_labels: Boolean
  with_producers: Boolean
}

input QueryArtistOptions {
  with_albums: Boolean
}

input QueryGenreOptions {
  with_albums: Boolean
}

input QueryLabelOptions {
  with_albums: Boolean
}

input QueryProducerOptions {
  with_albums: Boolean
}

type Track {
  length: Int
  name: String!
  side: Int
}

input UpdateAlbumInput {
  artist_ids: [Int!]
  description: String
  genre_ids: [Int!]
  label_ids: [Int!]
  length: Int
  name: String
  producer_ids: [Int!]
  release_data: String
  tracks: [UpdateTrackInput!]
}

input UpdateArtistInput {
  description: String
  id: Int!
  name: String
  origin: String
}

input UpdateGenreInput {
  id: Int!
  name: String
}

input UpdateLabelInput {
  id: Int!
  name: String
}

input UpdateOwnedAlbumInput {
  album_input: UpdateAlbumInput
  condition: Condition
  id: Int!
}

input UpdateProducerInput {
  id: Int!
  name: String
}

input UpdateTrackInput {
  length: Int
  name: String
  side: Int
}

input UpdateWishlistAlbumInput {
  album_input: UpdateAlbumInput
  id: Int!
  listings: [String!]
  ranking: Int
}

type WishlistAlbum {
  album: Album
  id: Int!
  listings: [String!]
  ranking: Int
}